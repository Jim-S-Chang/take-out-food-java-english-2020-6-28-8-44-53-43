import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        List<String> inputIDs = new ArrayList(); // 输入的商品ID
        List<Integer> numberOfItems = new ArrayList(); // 商品ID对应的数量

        // 赋值
        inputIDs = inputs.stream().map(item -> item.substring(0, item.indexOf("x") - 1)).collect(Collectors.toList());
        int length = inputs.get(0).length();
        numberOfItems = inputs.stream().map(item -> Integer.valueOf(item.substring(length-1, length))).collect(Collectors.toList());

        List<Item> allItems = itemRepository.findAll(); // 获取所有商品
        List<SalesPromotion> allSalesPromotions = salesPromotionRepository.findAll(); // 所有优惠

        int totalPrice = 0; // 总价
        int firstPromotion = 0; // 第一个优惠的价格
        int secondPromotion = 0; // 第二个优惠的价格

        List<String> secondSalesPromotionItemList = allSalesPromotions.get(1).getRelatedItems(); // 第二个优惠对应的商品
        List<String> salesItemName = new ArrayList<>(); // 商品名

        // 小票内容
        StringBuilder orderStringBuilder = new StringBuilder();
        orderStringBuilder.append("============= Order details =============\n");

        // 对仓库每一件商品循环
        for (Item item: allItems) {
            for (int i = 0; i < inputs.size(); i++) { // 对每一件输入的商品循环
                if (item.getId().equals(inputIDs.get(i))) { // 找到输入的商品对应仓库的商品ID
                    if (secondSalesPromotionItemList.contains(inputIDs.get(i))) { // 该商品是否属于第二个优惠
                        secondPromotion += (item.getPrice() / 2) * numberOfItems.get(i); // 计算第二个优惠的价格
                        salesItemName.add(item.getName()); // 获取商品名
                    } else { // 该商品没有第二个优惠
                        secondPromotion += item.getPrice() * numberOfItems.get(i); // 计算第二个优惠的价格
                    }
                    totalPrice += item.getPrice() * numberOfItems.get(i); // 将该商品加入总价
                    firstPromotion += item.getPrice() * numberOfItems.get(i); // 将该商品加入第二个优惠的价格
                    // 打印小票对应内容
                    orderStringBuilder.append(item.getName()).append(" x ").append(numberOfItems.get(i)).append(" = ").append((int) (item.getPrice() * numberOfItems.get(i))).append(" yuan\n");
                    break;
                }
            }
        }

        orderStringBuilder.append("-----------------------------------\n");

        // 判断订单是否符合第一个满30-6的优惠
        if(firstPromotion >= 30){
            firstPromotion -= 6;
        }

        if(totalPrice <= firstPromotion && totalPrice <= secondPromotion){ // 没有优惠可以使用
            orderStringBuilder.append("Total: " + totalPrice + " yuan\n");
            orderStringBuilder.append("===================================");
        }else if(firstPromotion < totalPrice && firstPromotion <= secondPromotion){ // 使用第一个优惠
            orderStringBuilder.append("Promotion used:\n");
            orderStringBuilder.append("Deduct 6 yuan when the order reaches 30 yuan, saving 6 yuan\n" + "-----------------------------------\n");
            orderStringBuilder.append("Total: " + firstPromotion + " yuan\n");
            orderStringBuilder.append("===================================");
        }else if(secondPromotion < totalPrice && secondPromotion < firstPromotion){ // 使用第二个优惠
            orderStringBuilder.append("Promotion used:\n");
            orderStringBuilder.append("Half price for certain dishes (");
            // 生成使用第二个优惠的商品的名字的字符串
            String saleItemNames = salesItemName.stream().reduce("",(previousElement, currentElement)-> previousElement + "," + currentElement);
            orderStringBuilder.append(saleItemNames.substring(1));
            orderStringBuilder.append(")，saving " + (totalPrice - secondPromotion) + " yuan\n");
            orderStringBuilder.append("-----------------------------------\n");
            orderStringBuilder.append("Total: " + secondPromotion + " yuan\n");
            orderStringBuilder.append("===================================");
        }
        return orderStringBuilder.toString();
    }
}
